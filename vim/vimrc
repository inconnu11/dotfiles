" -------------------------------------------------------------------------------
" vim-plug
" -------------------------------------------------------------------------------

" set the runtime path to include vim-plug and initialize
set rtp+=~/.vim/autoload/plug.vim
call plug#begin('~/.vim/vim_plug')
" easy alignment
Plug 'junegunn/vim-easy-align'
" calls any arbitrary Git command in vim
Plug 'tpope/vim-fugitive'
" tree dir
Plug 'preservim/nerdtree'
" fuzzy file finder
Plug 'junegunn/fzf'
" auto-complete (deprecated, use `sudo pacman -S youcompleteme..` instead)
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'ycm-core/YouCompleteMe'
" fast comment
Plug 'preservim/nerdcommenter'
" rainbow
Plug 'kien/rainbow_parentheses.vim'
" auto-pair
Plug 'jiangmiao/auto-pairs'
" auto-pep8 for python
Plug 'tell-k/vim-autopep8'
" indent line for python
Plug 'Yggdroot/indentLine'
" auto-jump
Plug 'ludovicchabant/vim-gutentags'
Plug 'vim-scripts/taglist.vim'
" zoom wimdow
Plug 'szw/vim-maximizer'
" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" All of your Plugins must be added before the following line
call plug#end()            " required
filetype on
filetype plugin indent on    " loading the plugin/indent files for specific file types

" bind <F2> to open/close NERTree
map <F2> :NERDTreeToggle<CR>
" auto-close NERTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif

" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'right:60%'
" open selected file in new tab (vsplited/hsplited)
let g:fzf_action = { 'enter': 'vsplit' , '=': 'split', 't': 'tabedit'}

" comment
map <C-\> <leader>ci <CR>

" rainbow always on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" auto-pep8 map to <F8>
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

" settings for auto-jump [https://www.reddit.com/r/vim/comments/d77t6j/guide_how_to_setup_ctags_with_gutentags_properly/]
" tag list window
map <silent> <F3> :TlistToggle<cr>
" gutentags will stop recursing to the upper directory when it encounters these file/dir names
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
" The name of the generated data file
let g:gutentags_ctags_tagfile = '.tags'
" Put all the automatically generated tags files into the ~/.cache/tags directory to avoid polluting the project directory
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" Check ~/.cache/tags, create a new one if it does not exist
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
" Configure ctags parameters
let g:gutentags_ctags_extra_args = ['--fields=+niazSlm', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px', '--python-kinds=-i']
" generate new tags if you just finished writing a new file
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0

" Zoom / Restore window.
" Whether Maximizer should set default mappings or not
let g:maximizer_set_default_mapping = 1
" Whether Maximizer should set default mappings with banged version or not
let g:maximizer_set_mapping_with_bang = 0
" The default mappings key
let g:maximizer_default_mapping_key = '<F4>'

" airline
" This is disabled by default; add the following to your vimrc to enable the extension
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="solarized"
let g:airline_solarized_bg='dark'
" Separators can be configured independently for the tabline, so here is how you can define straight tabs:
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'
" do not count withspace
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

" -------------------------------------------------------------------------------
" Common
" -------------------------------------------------------------------------------

" scheme
set termguicolors
set background=dark
"let g:solarized_termcolors=256
"let g:solarized_termtrans=1
colorscheme solarized8

" File encoding
set nu  " Set the line number
syntax on  " Syntax highlighting
"set autochdir  " Set the current dir as thr work dir

" Tab and Indent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
"set expandtab  " Use the space to instead of tab
set autoindent  " Copy indent from current line when starting a new line
set smartindent " auto indent
set cindent     " auto indent for cpp files

" Seach and Match
set hlsearch  " Highlight the search result
set incsearch  " Real-time search
set ignorecase
set smartcase
set showmatch  " When a bracket is inserted, briefly jump to the matching one

" Display
set showmode  " Show the current mode
"set t_Co=256  " If under tty, use 256

" Display tab and trail space
set list
set listchars=tab:>-,trail:.
" Not display above list
nmap <leader>l :set list!<CR>

" Other
" set nobackup
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/backup
set encoding=utf-8
set fileencodings=utf-8,gb18030,cp936,big5 " Set the encode
set termencoding=utf-8
set enc=utf8
set pastetoggle=<F10>  " Bind `F10` to `:set paste`
set backspace=2 " same as ":set backspace=indent,eol,start" in vim7.4
"set paste " Keep the original format of the pasted text

" Press `shift` while selecting with the mouse can disable into visual mode
" In mac os, hold `alt/option` is easier
" ref: http://stackoverflow.com/questions/4608161/copy-text-out-of-vim-with-set-mouse-a-enabled
set mouse=a  " Enable mouse
set selection=exclusive
set selectmode=mouse,key

" fold code
set foldmethod=indent  " The kind of folding used for the current window
set foldlevel=99

" When moving the cursor up or down, at least the number of lines displayed above or below the cursor will remain
set scrolloff=50

" -------------------------------------------------------------------------------
" Enhanced
" -------------------------------------------------------------------------------

" remember last edit position
autocmd BufWritePost $MYVIMRC source $MYVIMRC
autocmd BufReadPost *
                \ if line("'\"")>0&&line("'\"")<=line("$") |
                \   exe "normal g'\"" |
                \ endif

au BufRead,BufNewFile *.md set filetype=markdown  " .md default is modula2

" Execute python file being edited with <Shift> + e:
map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>

" Auto add head info
" .py file auto add header
function HeaderPython()
    call setline(1, "#!/usr/bin/env python")
    call append(1,  "# -*- coding: utf-8 -*-")
    call append(2,  "# Xingchen Song @ " . strftime('%Y-%m-%d', localtime()))
    normal G
    normal o
endf
autocmd bufnewfile *.py call HeaderPython()

" .sh file auto add header
function HeaderBash()
    call setline(1, "#!/bin/bash")
    call append(1,  "# Xingchen Song @ " . strftime('%Y-%m-%d', localtime()))
    normal G
    normal o
endf
autocmd bufnewfile *.sh call HeaderBash()

" ref: http://stackoverflow.com/questions/158968/changing-vim-indentation-behavior-by-file-type
autocmd FileType html set shiftwidth=2|set expandtab
autocmd FileType htmljinja setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType sh setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType vim setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab

" -------------------------------------------------------------------------------
" Bind Keys
" -------------------------------------------------------------------------------

" <C-l>: quick temp disable hlsearch
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Highlight TODO/FIXME/XXX
"highlight myTODO cterm=bold term=bold ctermbg=yellow ctermfg=black
"match myTODO /\(TODO\|XXX\|FIXME\)/

if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
  endif
endif

" Multi-line indent
xnoremap < <gv
xnoremap > >gv

" jump back
nmap oo <C-o>
nmap ii <C-i>
" change window
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
" change tab
nmap H gT
nmap L gt
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt
